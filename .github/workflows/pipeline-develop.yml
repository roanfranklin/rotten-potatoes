name: CI - Build/Push Rotten-Potatoes - Develop Test

on:
  push:
    branches: 
      - main
      - develop
    tags:
      - 'v*.*.*'

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    environment: develop

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          PASSWORD=${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          #CONTAINER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          CONTAINER="roanfranklin"
          #REPOSITORY=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          REPOSITORY="rotten-potatoes"
          TAGS="develop"

          # VERSION=$TAGS
          # KUBE_NAMESPACE="dev"
          # if [[ $GITHUB_REF == refs/tags/* ]]; then
          #   VERSION=${GITHUB_REF#refs/tags/v}
          #   KUBE_NAMESPACE="hml"
          # fi

          # if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          #   TAGS=$VERSION
          #   KUBE_NAMESPACE="prd"
          # fi

          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=container::${CONTAINER}
          echo ::set-output name=repository::${REPOSITORY}
      

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}


      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.container }}/${{ steps.prep.outputs.repository }}:${{ steps.prep.outputs.tags }}



      # como estamos na pipeline suponde que seja a branch develop,
      # aqui teria uma step para conectar na estrutura e executar o restart:
      # rollout restart deployment/application -n namespace


      - name: Image digest
        run: |
          echo ${{ steps.docker_build.outputs.digest }}


      # No lugar da step "Image digest", teria uma para realizar a verificação do deploy:
      # rollout status deployment application -n namespace


      # OBS.: No Github Actions, costumo a criar jobs "Inicial-Prep", "Check", "Login-Build-Push", "Deploy(DEV-HML-PRD)" e "Verificação/Status(com notificação)"

      # OBS. IMPORTANTE: Não criei o CD pois minha conta da DigitalOcean já nao tinha os 100 dolares ou 2 meses gratuito!